#pragma warning disable CS1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using GTA;
using LSDW.Abstractions.Infrastructure.Services;
using LSDW.Domain.Classes.Models;

namespace LSDW.Infrastructure.Services;

internal sealed partial class SettingsService : ISettingsService
{
	/// <summary>
	/// Initializes a instance of the settings service class.
	/// </summary>
	internal SettingsService()
	{
		string iniFilePath = Path.Combine(AppContext.BaseDirectory, Settings.IniFileName);
		_scriptSettings = ScriptSettings.Load(iniFilePath);

    DealerSettings = new DealerSettings(_scriptSettings);
    MarketSettings = new MarketSettings(_scriptSettings);
    PlayerSettings = new PlayerSettings(_scriptSettings);
    TraffickingSettings = new TraffickingSettings(_scriptSettings);
    
    Load();
    Save();
	}

  public IDealerSettings DealerSettings { get; }
  public IMarketSettings MarketSettings { get; }
  public IPlayerSettings PlayerSettings { get; }
  public ITraffickingSettings TraffickingSettings { get; }

  private void Load()
  {
    int downtimeinhours = DealerSettings.GetDownTimeInHours();
    DealerSettings.SetDownTimeInHours(downtimeinhours);
    bool hasarmor = DealerSettings.GetHasArmor();
    DealerSettings.SetHasArmor(hasarmor);
    bool hasweapons = DealerSettings.GetHasWeapons();
    DealerSettings.SetHasWeapons(hasweapons);
    float maximumdrugprice = MarketSettings.GetMaximumDrugPrice();
    MarketSettings.SetMaximumDrugPrice(maximumdrugprice);
    float minimumdrugprice = MarketSettings.GetMinimumDrugPrice();
    MarketSettings.SetMinimumDrugPrice(minimumdrugprice);
    float experiencemultiplier = PlayerSettings.GetExperienceMultiplier();
    PlayerSettings.SetExperienceMultiplier(experiencemultiplier);
    bool loosedrugsondeath = PlayerSettings.GetLooseDrugsOnDeath();
    PlayerSettings.SetLooseDrugsOnDeath(loosedrugsondeath);
    bool loosemoneyondeath = PlayerSettings.GetLooseMoneyOnDeath();
    PlayerSettings.SetLooseMoneyOnDeath(loosemoneyondeath);
    bool loosedrugswhenbusted = PlayerSettings.GetLooseDrugsWhenBusted();
    PlayerSettings.SetLooseDrugsWhenBusted(loosedrugswhenbusted);
    bool loosemoneywhenbusted = PlayerSettings.GetLooseMoneyWhenBusted();
    PlayerSettings.SetLooseMoneyWhenBusted(loosemoneywhenbusted);
    int inventoryexpansionperlevel = PlayerSettings.GetInventoryExpansionPerLevel();
    PlayerSettings.SetInventoryExpansionPerLevel(inventoryexpansionperlevel);
    int startinginventory = PlayerSettings.GetStartingInventory();
    PlayerSettings.SetStartingInventory(startinginventory);
    float bustchance = TraffickingSettings.GetBustChance();
    TraffickingSettings.SetBustChance(bustchance);
    int wantedlevel = TraffickingSettings.GetWantedLevel();
    TraffickingSettings.SetWantedLevel(wantedlevel);
  }
}

internal sealed class DealerSettings : IDealerSettings
{
  private readonly ScriptSettings _scriptSettings;

  internal DealerSettings(ScriptSettings scriptSettings)
    => _scriptSettings = scriptSettings;

  public List<int> GetDownTimeInHoursValues()
    => Settings.Dealer.GetDownTimeInHoursValues();

  public int GetDownTimeInHours()
    => _scriptSettings.GetValue("DEALERSETTINGS", "DOWNTIMEINHOURS", Settings.Dealer.DownTimeInHours);

	public void SetDownTimeInHours(int value)
  {
		_scriptSettings.SetValue("DEALERSETTINGS", "DOWNTIMEINHOURS", value);
		Settings.Dealer.DownTimeInHours = value;
  }

  public bool GetHasArmor()
    => _scriptSettings.GetValue("DEALERSETTINGS", "HASARMOR", Settings.Dealer.HasArmor);

	public void SetHasArmor(bool value)
  {
		_scriptSettings.SetValue("DEALERSETTINGS", "HASARMOR", value);
		Settings.Dealer.HasArmor = value;
  }

  public bool GetHasWeapons()
    => _scriptSettings.GetValue("DEALERSETTINGS", "HASWEAPONS", Settings.Dealer.HasWeapons);

	public void SetHasWeapons(bool value)
  {
		_scriptSettings.SetValue("DEALERSETTINGS", "HASWEAPONS", value);
		Settings.Dealer.HasWeapons = value;
  }
}

internal sealed class MarketSettings : IMarketSettings
{
  private readonly ScriptSettings _scriptSettings;

  internal MarketSettings(ScriptSettings scriptSettings)
    => _scriptSettings = scriptSettings;

  public List<float> GetMaximumDrugPriceValues()
    => Settings.Market.GetMaximumDrugPriceValues();

  public float GetMaximumDrugPrice()
    => _scriptSettings.GetValue("MARKETSETTINGS", "MAXIMUMDRUGPRICE", Settings.Market.MaximumDrugPrice);

	public void SetMaximumDrugPrice(float value)
  {
		_scriptSettings.SetValue("MARKETSETTINGS", "MAXIMUMDRUGPRICE", value);
		Settings.Market.MaximumDrugPrice = value;
  }
  public List<float> GetMinimumDrugPriceValues()
    => Settings.Market.GetMinimumDrugPriceValues();

  public float GetMinimumDrugPrice()
    => _scriptSettings.GetValue("MARKETSETTINGS", "MINIMUMDRUGPRICE", Settings.Market.MinimumDrugPrice);

	public void SetMinimumDrugPrice(float value)
  {
		_scriptSettings.SetValue("MARKETSETTINGS", "MINIMUMDRUGPRICE", value);
		Settings.Market.MinimumDrugPrice = value;
  }
}

internal sealed class PlayerSettings : IPlayerSettings
{
  private readonly ScriptSettings _scriptSettings;

  internal PlayerSettings(ScriptSettings scriptSettings)
    => _scriptSettings = scriptSettings;

  public List<float> GetExperienceMultiplierValues()
    => Settings.Player.GetExperienceMultiplierValues();

  public float GetExperienceMultiplier()
    => _scriptSettings.GetValue("PLAYERSETTINGS", "EXPERIENCEMULTIPLIER", Settings.Player.ExperienceMultiplier);

	public void SetExperienceMultiplier(float value)
  {
		_scriptSettings.SetValue("PLAYERSETTINGS", "EXPERIENCEMULTIPLIER", value);
		Settings.Player.ExperienceMultiplier = value;
  }

  public bool GetLooseDrugsOnDeath()
    => _scriptSettings.GetValue("PLAYERSETTINGS", "LOOSEDRUGSONDEATH", Settings.Player.LooseDrugsOnDeath);

	public void SetLooseDrugsOnDeath(bool value)
  {
		_scriptSettings.SetValue("PLAYERSETTINGS", "LOOSEDRUGSONDEATH", value);
		Settings.Player.LooseDrugsOnDeath = value;
  }

  public bool GetLooseMoneyOnDeath()
    => _scriptSettings.GetValue("PLAYERSETTINGS", "LOOSEMONEYONDEATH", Settings.Player.LooseMoneyOnDeath);

	public void SetLooseMoneyOnDeath(bool value)
  {
		_scriptSettings.SetValue("PLAYERSETTINGS", "LOOSEMONEYONDEATH", value);
		Settings.Player.LooseMoneyOnDeath = value;
  }

  public bool GetLooseDrugsWhenBusted()
    => _scriptSettings.GetValue("PLAYERSETTINGS", "LOOSEDRUGSWHENBUSTED", Settings.Player.LooseDrugsWhenBusted);

	public void SetLooseDrugsWhenBusted(bool value)
  {
		_scriptSettings.SetValue("PLAYERSETTINGS", "LOOSEDRUGSWHENBUSTED", value);
		Settings.Player.LooseDrugsWhenBusted = value;
  }

  public bool GetLooseMoneyWhenBusted()
    => _scriptSettings.GetValue("PLAYERSETTINGS", "LOOSEMONEYWHENBUSTED", Settings.Player.LooseMoneyWhenBusted);

	public void SetLooseMoneyWhenBusted(bool value)
  {
		_scriptSettings.SetValue("PLAYERSETTINGS", "LOOSEMONEYWHENBUSTED", value);
		Settings.Player.LooseMoneyWhenBusted = value;
  }
  public List<int> GetInventoryExpansionPerLevelValues()
    => Settings.Player.GetInventoryExpansionPerLevelValues();

  public int GetInventoryExpansionPerLevel()
    => _scriptSettings.GetValue("PLAYERSETTINGS", "INVENTORYEXPANSIONPERLEVEL", Settings.Player.InventoryExpansionPerLevel);

	public void SetInventoryExpansionPerLevel(int value)
  {
		_scriptSettings.SetValue("PLAYERSETTINGS", "INVENTORYEXPANSIONPERLEVEL", value);
		Settings.Player.InventoryExpansionPerLevel = value;
  }
  public List<int> GetStartingInventoryValues()
    => Settings.Player.GetStartingInventoryValues();

  public int GetStartingInventory()
    => _scriptSettings.GetValue("PLAYERSETTINGS", "STARTINGINVENTORY", Settings.Player.StartingInventory);

	public void SetStartingInventory(int value)
  {
		_scriptSettings.SetValue("PLAYERSETTINGS", "STARTINGINVENTORY", value);
		Settings.Player.StartingInventory = value;
  }
}

internal sealed class TraffickingSettings : ITraffickingSettings
{
  private readonly ScriptSettings _scriptSettings;

  internal TraffickingSettings(ScriptSettings scriptSettings)
    => _scriptSettings = scriptSettings;

  public List<float> GetBustChanceValues()
    => Settings.Trafficking.GetBustChanceValues();

  public float GetBustChance()
    => _scriptSettings.GetValue("TRAFFICKINGSETTINGS", "BUSTCHANCE", Settings.Trafficking.BustChance);

	public void SetBustChance(float value)
  {
		_scriptSettings.SetValue("TRAFFICKINGSETTINGS", "BUSTCHANCE", value);
		Settings.Trafficking.BustChance = value;
  }
  public List<int> GetWantedLevelValues()
    => Settings.Trafficking.GetWantedLevelValues();

  public int GetWantedLevel()
    => _scriptSettings.GetValue("TRAFFICKINGSETTINGS", "WANTEDLEVEL", Settings.Trafficking.WantedLevel);

	public void SetWantedLevel(int value)
  {
		_scriptSettings.SetValue("TRAFFICKINGSETTINGS", "WANTEDLEVEL", value);
		Settings.Trafficking.WantedLevel = value;
  }
}
