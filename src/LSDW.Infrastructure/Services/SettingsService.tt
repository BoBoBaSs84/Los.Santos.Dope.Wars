<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(TargetDir)LSDW.Abstractions.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="LSDW.Abstractions.Domain.Models" #>
<#@ output extension="Designer.cs" #>
#pragma warning disable CS1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace LSDW.Infrastructure.Services;
using static LSDW.Abstractions.Domain.Models.ISettings;

internal sealed partial class SettingsService
{
	public void Load()
	{
<#
List<PropertyInfo> interfaces = GetProperties(typeof(ISettings));
foreach (PropertyInfo @interface in interfaces.Where(x => x.PropertyType.IsInterface))
{
	List<PropertyInfo> properties = GetProperties(@interface.PropertyType);
	foreach (PropertyInfo property in properties)
	{
		var sectionName = @interface.Name;
		var propertyName = property.Name;
		var dataType = TypeNameOrAlias(property.PropertyType);
#>
		<#= dataType #> value<#= propertyName #> = _scriptSettings.GetValue("<#= sectionName.ToUpper() #>", "<#= propertyName.ToUpper() #>", <#= sectionName #>.<#= propertyName #>);
		_scriptSettings.SetValue("<#= sectionName.ToUpper() #>", "<#= propertyName.ToUpper() #>", value<#= propertyName #>);
<#
}}
#>
	}

	private void OnPropertyChanged(object sender, PropertyChangedEventArgs args)
	{
<#
interfaces = GetProperties(typeof(ISettings));
foreach (PropertyInfo @interface in interfaces.Where(x => x.PropertyType.IsInterface))
{
		var sender = @interface.PropertyType.Name;
		var alias = @interface.Name;
#>
		if (sender is <#= sender #> <#= alias.ToLower() #>)
		{
<#
	List<PropertyInfo> properties = GetProperties(@interface.PropertyType);
	foreach (PropertyInfo property in properties)
	{
		var name = property.Name;
#>
			if(args.PropertyName.Equals(nameof(<#= alias.ToLower() #>.<#= name #>)))
			{
				_scriptSettings.SetValue("<#= alias.ToUpper() #>", "<#= name.ToUpper() #>", <#= alias.ToLower() #>.<#= name #>);
				return;
			}	
<#}#>
		}
<#}#>
	}
}
<#+
	private static List<PropertyInfo> GetProperties(Type type)
		=> type.GetProperties().ToList();

	private static string TypeNameOrAlias(Type type)
		=> _typeAlias.TryGetValue(type, out string alias) ? alias : type.Name;

	private static readonly Dictionary<Type, string> _typeAlias = new()
	{
		{ typeof(bool), "bool" },
		{ typeof(byte), "byte" },
		{ typeof(char), "char" },
		{ typeof(decimal), "decimal" },
		{ typeof(double), "double" },
		{ typeof(float), "float" },
		{ typeof(int), "int" },
		{ typeof(long), "long" },
		{ typeof(object), "object" },
		{ typeof(sbyte), "sbyte" },
		{ typeof(short), "short" },
		{ typeof(string), "string" },
		{ typeof(uint), "uint" },
		{ typeof(ulong), "ulong" },
		{ typeof(void), "void" }
	};
#>