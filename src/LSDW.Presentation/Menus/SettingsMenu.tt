<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(TargetDir)LSDW.Abstractions.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="LSDW.Abstractions.Infrastructure.Services" #>
<#@ output extension="Designer.cs" #>
#pragma warning disable CS1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using LSDW.Presentation.Properties;

namespace LSDW.Presentation.Menus;

internal sealed partial class SettingsMenu
{
	private void AddMenuItems()
	{
<#
List<PropertyInfo> interfaces = GetProperties(typeof(ISettingsService));
foreach (PropertyInfo @interface in interfaces)
{
	List<PropertyInfo> properties = GetProperties(@interface.PropertyType);
	foreach (PropertyInfo property in properties)
	{
		var dataType = TypeNameOrAlias(property.PropertyType.GetProperties().First().PropertyType);
		var name = property.Name;
		var title = $"Resources.UI_Settings_{@interface.Name}_{property.Name}_Title";
		var desription = $"Resources.UI_Settings_{@interface.Name}_{property.Name}_Description";
#>
<# if (dataType == "bool") { #>
		var checkBox<#= name #> = AddCheckbox(
			<#= title #>,
			<#= desription #>,
			_settingsService.<#= @interface.Name #>.<#= name #>.Value,
			changed => { _settingsService.<#= @interface.Name #>.<#= name #>.Value = changed; });
		
		_settingsService.<#= @interface.Name #>.<#= name #>.ValueChanged += (sender, args) =>
		{
			checkBox<#= name #>.Checked = args.NewValue;
			_settingsService.SetValue("<#= @interface.Name.ToUpper() #>", "<#= name.ToUpper() #>", args.NewValue);
		};
			
<# } else { #>
		var listItem<#= name #> = AddListItem(
			<#= title #>,
			<#= desription #>,
			(item, index) => { _settingsService.<#= @interface.Name #>.<#= name #>.Value = item; },
			_settingsService.<#= @interface.Name #>.Get<#= name #>Values()
			);

		_settingsService.<#= @interface.Name #>.<#= name #>.ValueChanged += (sender, args) =>
		{
			listItem<#= name #>.SelectedItem = args.NewValue;
			_settingsService.SetValue("<#= @interface.Name.ToUpper() #>", "<#= name.ToUpper() #>", args.NewValue);
		};

<# }}} #>
	}
}
<#+
	private static List<PropertyInfo> GetProperties(Type type)
		=> type.GetProperties().ToList();

	private static string TypeNameOrAlias(Type type)
		=> _typeAlias.TryGetValue(type, out string alias) ? alias : type.Name;

	private static readonly Dictionary<Type, string> _typeAlias = new()
	{
		{ typeof(bool), "bool" },
		{ typeof(byte), "byte" },
		{ typeof(char), "char" },
		{ typeof(decimal), "decimal" },
		{ typeof(double), "double" },
		{ typeof(float), "float" },
		{ typeof(int), "int" },
		{ typeof(long), "long" },
		{ typeof(object), "object" },
		{ typeof(sbyte), "sbyte" },
		{ typeof(short), "short" },
		{ typeof(string), "string" },
		{ typeof(uint), "uint" },
		{ typeof(ulong), "ulong" },
		{ typeof(void), "void" }
	};
#>