#pragma warning disable CS1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using LemonUI.Menus;
using LSDW.Presentation.Items;
using RESX = LSDW.Presentation.Properties.Resources;

namespace LSDW.Presentation.Menus;

internal sealed partial class SettingsMenu
{
	private void AddMenuItems()
	{

    SettingListItem<int> dealerDownTimeInHoursItem = new(RESX.UI_Settings_Dealer_DownTimeInHours_Title)
    {
      Description = RESX.UI_Settings_Dealer_DownTimeInHours_Description,
      Items = _dealerDownTimeInHoursValues,
      SelectedItem = _settingsService.DealerSettings.GetDownTimeInHours()
    };
    dealerDownTimeInHoursItem.ItemChanged += OnDealerDownTimeInHoursItemChanged;
    Add(dealerDownTimeInHoursItem);

    SettingListItem<bool> dealerHasArmorItem = new(RESX.UI_Settings_Dealer_HasArmor_Title)
    {
      Description = RESX.UI_Settings_Dealer_HasArmor_Description,
      Items = _dealerHasArmorValues,
      SelectedItem = _settingsService.DealerSettings.GetHasArmor()
    };
    dealerHasArmorItem.ItemChanged += OnDealerHasArmorItemChanged;
    Add(dealerHasArmorItem);

    SettingListItem<bool> dealerHasWeaponsItem = new(RESX.UI_Settings_Dealer_HasWeapons_Title)
    {
      Description = RESX.UI_Settings_Dealer_HasWeapons_Description,
      Items = _dealerHasWeaponsValues,
      SelectedItem = _settingsService.DealerSettings.GetHasWeapons()
    };
    dealerHasWeaponsItem.ItemChanged += OnDealerHasWeaponsItemChanged;
    Add(dealerHasWeaponsItem);

    SettingListItem<float> marketMaximumDrugValueItem = new(RESX.UI_Settings_Market_MaximumDrugValue_Title)
    {
      Description = RESX.UI_Settings_Market_MaximumDrugValue_Description,
      Items = _marketMaximumDrugValueValues,
      SelectedItem = _settingsService.MarketSettings.GetMaximumDrugValue()
    };
    marketMaximumDrugValueItem.ItemChanged += OnMarketMaximumDrugValueItemChanged;
    Add(marketMaximumDrugValueItem);

    SettingListItem<float> marketMinimumDrugValueItem = new(RESX.UI_Settings_Market_MinimumDrugValue_Title)
    {
      Description = RESX.UI_Settings_Market_MinimumDrugValue_Description,
      Items = _marketMinimumDrugValueValues,
      SelectedItem = _settingsService.MarketSettings.GetMinimumDrugValue()
    };
    marketMinimumDrugValueItem.ItemChanged += OnMarketMinimumDrugValueItemChanged;
    Add(marketMinimumDrugValueItem);

    SettingListItem<float> playerExperienceMultiplierItem = new(RESX.UI_Settings_Player_ExperienceMultiplier_Title)
    {
      Description = RESX.UI_Settings_Player_ExperienceMultiplier_Description,
      Items = _playerExperienceMultiplierValues,
      SelectedItem = _settingsService.PlayerSettings.GetExperienceMultiplier()
    };
    playerExperienceMultiplierItem.ItemChanged += OnPlayerExperienceMultiplierItemChanged;
    Add(playerExperienceMultiplierItem);

    SettingListItem<bool> playerLooseDrugsOnDeathItem = new(RESX.UI_Settings_Player_LooseDrugsOnDeath_Title)
    {
      Description = RESX.UI_Settings_Player_LooseDrugsOnDeath_Description,
      Items = _playerLooseDrugsOnDeathValues,
      SelectedItem = _settingsService.PlayerSettings.GetLooseDrugsOnDeath()
    };
    playerLooseDrugsOnDeathItem.ItemChanged += OnPlayerLooseDrugsOnDeathItemChanged;
    Add(playerLooseDrugsOnDeathItem);

    SettingListItem<bool> playerLooseMoneyOnDeathItem = new(RESX.UI_Settings_Player_LooseMoneyOnDeath_Title)
    {
      Description = RESX.UI_Settings_Player_LooseMoneyOnDeath_Description,
      Items = _playerLooseMoneyOnDeathValues,
      SelectedItem = _settingsService.PlayerSettings.GetLooseMoneyOnDeath()
    };
    playerLooseMoneyOnDeathItem.ItemChanged += OnPlayerLooseMoneyOnDeathItemChanged;
    Add(playerLooseMoneyOnDeathItem);

    SettingListItem<bool> playerLooseDrugsWhenBustedItem = new(RESX.UI_Settings_Player_LooseDrugsWhenBusted_Title)
    {
      Description = RESX.UI_Settings_Player_LooseDrugsWhenBusted_Description,
      Items = _playerLooseDrugsWhenBustedValues,
      SelectedItem = _settingsService.PlayerSettings.GetLooseDrugsWhenBusted()
    };
    playerLooseDrugsWhenBustedItem.ItemChanged += OnPlayerLooseDrugsWhenBustedItemChanged;
    Add(playerLooseDrugsWhenBustedItem);

    SettingListItem<bool> playerLooseMoneyWhenBustedItem = new(RESX.UI_Settings_Player_LooseMoneyWhenBusted_Title)
    {
      Description = RESX.UI_Settings_Player_LooseMoneyWhenBusted_Description,
      Items = _playerLooseMoneyWhenBustedValues,
      SelectedItem = _settingsService.PlayerSettings.GetLooseMoneyWhenBusted()
    };
    playerLooseMoneyWhenBustedItem.ItemChanged += OnPlayerLooseMoneyWhenBustedItemChanged;
    Add(playerLooseMoneyWhenBustedItem);

    SettingListItem<int> playerInventoryExpansionPerLevelItem = new(RESX.UI_Settings_Player_InventoryExpansionPerLevel_Title)
    {
      Description = RESX.UI_Settings_Player_InventoryExpansionPerLevel_Description,
      Items = _playerInventoryExpansionPerLevelValues,
      SelectedItem = _settingsService.PlayerSettings.GetInventoryExpansionPerLevel()
    };
    playerInventoryExpansionPerLevelItem.ItemChanged += OnPlayerInventoryExpansionPerLevelItemChanged;
    Add(playerInventoryExpansionPerLevelItem);

    SettingListItem<int> playerStartingInventoryItem = new(RESX.UI_Settings_Player_StartingInventory_Title)
    {
      Description = RESX.UI_Settings_Player_StartingInventory_Description,
      Items = _playerStartingInventoryValues,
      SelectedItem = _settingsService.PlayerSettings.GetStartingInventory()
    };
    playerStartingInventoryItem.ItemChanged += OnPlayerStartingInventoryItemChanged;
    Add(playerStartingInventoryItem);

    SettingListItem<float> traffickingBustChanceItem = new(RESX.UI_Settings_Trafficking_BustChance_Title)
    {
      Description = RESX.UI_Settings_Trafficking_BustChance_Description,
      Items = _traffickingBustChanceValues,
      SelectedItem = _settingsService.TraffickingSettings.GetBustChance()
    };
    traffickingBustChanceItem.ItemChanged += OnTraffickingBustChanceItemChanged;
    Add(traffickingBustChanceItem);

    SettingListItem<int> traffickingWantedLevelItem = new(RESX.UI_Settings_Trafficking_WantedLevel_Title)
    {
      Description = RESX.UI_Settings_Trafficking_WantedLevel_Description,
      Items = _traffickingWantedLevelValues,
      SelectedItem = _settingsService.TraffickingSettings.GetWantedLevel()
    };
    traffickingWantedLevelItem.ItemChanged += OnTraffickingWantedLevelItemChanged;
    Add(traffickingWantedLevelItem);
	}

  private void OnDealerDownTimeInHoursItemChanged(object sender, ItemChangedEventArgs<int> args)
  {
    if (sender is not SettingListItem<int> item)
      return;
    _settingsService.DealerSettings.SetDownTimeInHours(item.SelectedItem);
  }
  private void OnDealerHasArmorItemChanged(object sender, ItemChangedEventArgs<bool> args)
  {
    if (sender is not SettingListItem<bool> item)
      return;
    _settingsService.DealerSettings.SetHasArmor(item.SelectedItem);
  }
  private void OnDealerHasWeaponsItemChanged(object sender, ItemChangedEventArgs<bool> args)
  {
    if (sender is not SettingListItem<bool> item)
      return;
    _settingsService.DealerSettings.SetHasWeapons(item.SelectedItem);
  }
  private void OnMarketMaximumDrugValueItemChanged(object sender, ItemChangedEventArgs<float> args)
  {
    if (sender is not SettingListItem<float> item)
      return;
    _settingsService.MarketSettings.SetMaximumDrugValue(item.SelectedItem);
  }
  private void OnMarketMinimumDrugValueItemChanged(object sender, ItemChangedEventArgs<float> args)
  {
    if (sender is not SettingListItem<float> item)
      return;
    _settingsService.MarketSettings.SetMinimumDrugValue(item.SelectedItem);
  }
  private void OnPlayerExperienceMultiplierItemChanged(object sender, ItemChangedEventArgs<float> args)
  {
    if (sender is not SettingListItem<float> item)
      return;
    _settingsService.PlayerSettings.SetExperienceMultiplier(item.SelectedItem);
  }
  private void OnPlayerLooseDrugsOnDeathItemChanged(object sender, ItemChangedEventArgs<bool> args)
  {
    if (sender is not SettingListItem<bool> item)
      return;
    _settingsService.PlayerSettings.SetLooseDrugsOnDeath(item.SelectedItem);
  }
  private void OnPlayerLooseMoneyOnDeathItemChanged(object sender, ItemChangedEventArgs<bool> args)
  {
    if (sender is not SettingListItem<bool> item)
      return;
    _settingsService.PlayerSettings.SetLooseMoneyOnDeath(item.SelectedItem);
  }
  private void OnPlayerLooseDrugsWhenBustedItemChanged(object sender, ItemChangedEventArgs<bool> args)
  {
    if (sender is not SettingListItem<bool> item)
      return;
    _settingsService.PlayerSettings.SetLooseDrugsWhenBusted(item.SelectedItem);
  }
  private void OnPlayerLooseMoneyWhenBustedItemChanged(object sender, ItemChangedEventArgs<bool> args)
  {
    if (sender is not SettingListItem<bool> item)
      return;
    _settingsService.PlayerSettings.SetLooseMoneyWhenBusted(item.SelectedItem);
  }
  private void OnPlayerInventoryExpansionPerLevelItemChanged(object sender, ItemChangedEventArgs<int> args)
  {
    if (sender is not SettingListItem<int> item)
      return;
    _settingsService.PlayerSettings.SetInventoryExpansionPerLevel(item.SelectedItem);
  }
  private void OnPlayerStartingInventoryItemChanged(object sender, ItemChangedEventArgs<int> args)
  {
    if (sender is not SettingListItem<int> item)
      return;
    _settingsService.PlayerSettings.SetStartingInventory(item.SelectedItem);
  }
  private void OnTraffickingBustChanceItemChanged(object sender, ItemChangedEventArgs<float> args)
  {
    if (sender is not SettingListItem<float> item)
      return;
    _settingsService.TraffickingSettings.SetBustChance(item.SelectedItem);
  }
  private void OnTraffickingWantedLevelItemChanged(object sender, ItemChangedEventArgs<int> args)
  {
    if (sender is not SettingListItem<int> item)
      return;
    _settingsService.TraffickingSettings.SetWantedLevel(item.SelectedItem);
  }
}
