#pragma warning disable CS1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using LSDW.Presentation.Properties;
using static LSDW.Abstractions.Domain.Models.ISettings;

namespace LSDW.Presentation.Menus;

internal sealed partial class SettingsMenu
{
	private void AddMenuItems()
	{
		var listItemDownTimeInHours = AddListItem(
			Resources.UI_Settings_Dealer_DownTimeInHours_Title,
			Resources.UI_Settings_Dealer_DownTimeInHours_Description,
			(item, index) => { _settingsService.Dealer.DownTimeInHours = item; },
			_settingsService.Dealer.GetDownTimeInHoursValues()
			);

		_settingsService.Dealer.PropertyChanged += (sender, args) =>
		{
			if (sender is not IDealerSettings dealer)
				return;

			if (!args.PropertyName.Equals(nameof(dealer.DownTimeInHours)))
				return;

			listItemDownTimeInHours.SelectedItem = dealer.DownTimeInHours;
		};

		var checkBoxHasArmor = AddCheckbox(
			Resources.UI_Settings_Dealer_HasArmor_Title,
			Resources.UI_Settings_Dealer_HasArmor_Description,
			_settingsService.Dealer.HasArmor,
			changed => { _settingsService.Dealer.HasArmor = changed; });
		
		_settingsService.Dealer.PropertyChanged += (sender, args) =>
		{
			if (sender is not IDealerSettings dealer)
				return;

			if (!args.PropertyName.Equals(nameof(dealer.HasArmor)))
				return;

			checkBoxHasArmor.Checked = dealer.HasArmor;
		};
			
		var checkBoxHasWeapons = AddCheckbox(
			Resources.UI_Settings_Dealer_HasWeapons_Title,
			Resources.UI_Settings_Dealer_HasWeapons_Description,
			_settingsService.Dealer.HasWeapons,
			changed => { _settingsService.Dealer.HasWeapons = changed; });
		
		_settingsService.Dealer.PropertyChanged += (sender, args) =>
		{
			if (sender is not IDealerSettings dealer)
				return;

			if (!args.PropertyName.Equals(nameof(dealer.HasWeapons)))
				return;

			checkBoxHasWeapons.Checked = dealer.HasWeapons;
		};
			
		var listItemInventoryChangeInterval = AddListItem(
			Resources.UI_Settings_Market_InventoryChangeInterval_Title,
			Resources.UI_Settings_Market_InventoryChangeInterval_Description,
			(item, index) => { _settingsService.Market.InventoryChangeInterval = item; },
			_settingsService.Market.GetInventoryChangeIntervalValues()
			);

		_settingsService.Market.PropertyChanged += (sender, args) =>
		{
			if (sender is not IMarketSettings market)
				return;

			if (!args.PropertyName.Equals(nameof(market.InventoryChangeInterval)))
				return;

			listItemInventoryChangeInterval.SelectedItem = market.InventoryChangeInterval;
		};

		var listItemMaximumDrugPrice = AddListItem(
			Resources.UI_Settings_Market_MaximumDrugPrice_Title,
			Resources.UI_Settings_Market_MaximumDrugPrice_Description,
			(item, index) => { _settingsService.Market.MaximumDrugPrice = item; },
			_settingsService.Market.GetMaximumDrugPriceValues()
			);

		_settingsService.Market.PropertyChanged += (sender, args) =>
		{
			if (sender is not IMarketSettings market)
				return;

			if (!args.PropertyName.Equals(nameof(market.MaximumDrugPrice)))
				return;

			listItemMaximumDrugPrice.SelectedItem = market.MaximumDrugPrice;
		};

		var listItemMinimumDrugPrice = AddListItem(
			Resources.UI_Settings_Market_MinimumDrugPrice_Title,
			Resources.UI_Settings_Market_MinimumDrugPrice_Description,
			(item, index) => { _settingsService.Market.MinimumDrugPrice = item; },
			_settingsService.Market.GetMinimumDrugPriceValues()
			);

		_settingsService.Market.PropertyChanged += (sender, args) =>
		{
			if (sender is not IMarketSettings market)
				return;

			if (!args.PropertyName.Equals(nameof(market.MinimumDrugPrice)))
				return;

			listItemMinimumDrugPrice.SelectedItem = market.MinimumDrugPrice;
		};

		var listItemPriceChangeInterval = AddListItem(
			Resources.UI_Settings_Market_PriceChangeInterval_Title,
			Resources.UI_Settings_Market_PriceChangeInterval_Description,
			(item, index) => { _settingsService.Market.PriceChangeInterval = item; },
			_settingsService.Market.GetPriceChangeIntervalValues()
			);

		_settingsService.Market.PropertyChanged += (sender, args) =>
		{
			if (sender is not IMarketSettings market)
				return;

			if (!args.PropertyName.Equals(nameof(market.PriceChangeInterval)))
				return;

			listItemPriceChangeInterval.SelectedItem = market.PriceChangeInterval;
		};

		var listItemSpecialOfferChance = AddListItem(
			Resources.UI_Settings_Market_SpecialOfferChance_Title,
			Resources.UI_Settings_Market_SpecialOfferChance_Description,
			(item, index) => { _settingsService.Market.SpecialOfferChance = item; },
			_settingsService.Market.GetSpecialOfferChanceValues()
			);

		_settingsService.Market.PropertyChanged += (sender, args) =>
		{
			if (sender is not IMarketSettings market)
				return;

			if (!args.PropertyName.Equals(nameof(market.SpecialOfferChance)))
				return;

			listItemSpecialOfferChance.SelectedItem = market.SpecialOfferChance;
		};

		var listItemExperienceMultiplier = AddListItem(
			Resources.UI_Settings_Player_ExperienceMultiplier_Title,
			Resources.UI_Settings_Player_ExperienceMultiplier_Description,
			(item, index) => { _settingsService.Player.ExperienceMultiplier = item; },
			_settingsService.Player.GetExperienceMultiplierValues()
			);

		_settingsService.Player.PropertyChanged += (sender, args) =>
		{
			if (sender is not IPlayerSettings player)
				return;

			if (!args.PropertyName.Equals(nameof(player.ExperienceMultiplier)))
				return;

			listItemExperienceMultiplier.SelectedItem = player.ExperienceMultiplier;
		};

		var listItemInventoryExpansionPerLevel = AddListItem(
			Resources.UI_Settings_Player_InventoryExpansionPerLevel_Title,
			Resources.UI_Settings_Player_InventoryExpansionPerLevel_Description,
			(item, index) => { _settingsService.Player.InventoryExpansionPerLevel = item; },
			_settingsService.Player.GetInventoryExpansionPerLevelValues()
			);

		_settingsService.Player.PropertyChanged += (sender, args) =>
		{
			if (sender is not IPlayerSettings player)
				return;

			if (!args.PropertyName.Equals(nameof(player.InventoryExpansionPerLevel)))
				return;

			listItemInventoryExpansionPerLevel.SelectedItem = player.InventoryExpansionPerLevel;
		};

		var checkBoxLooseDrugsOnDeath = AddCheckbox(
			Resources.UI_Settings_Player_LooseDrugsOnDeath_Title,
			Resources.UI_Settings_Player_LooseDrugsOnDeath_Description,
			_settingsService.Player.LooseDrugsOnDeath,
			changed => { _settingsService.Player.LooseDrugsOnDeath = changed; });
		
		_settingsService.Player.PropertyChanged += (sender, args) =>
		{
			if (sender is not IPlayerSettings player)
				return;

			if (!args.PropertyName.Equals(nameof(player.LooseDrugsOnDeath)))
				return;

			checkBoxLooseDrugsOnDeath.Checked = player.LooseDrugsOnDeath;
		};
			
		var checkBoxLooseDrugsWhenBusted = AddCheckbox(
			Resources.UI_Settings_Player_LooseDrugsWhenBusted_Title,
			Resources.UI_Settings_Player_LooseDrugsWhenBusted_Description,
			_settingsService.Player.LooseDrugsWhenBusted,
			changed => { _settingsService.Player.LooseDrugsWhenBusted = changed; });
		
		_settingsService.Player.PropertyChanged += (sender, args) =>
		{
			if (sender is not IPlayerSettings player)
				return;

			if (!args.PropertyName.Equals(nameof(player.LooseDrugsWhenBusted)))
				return;

			checkBoxLooseDrugsWhenBusted.Checked = player.LooseDrugsWhenBusted;
		};
			
		var checkBoxLooseMoneyOnDeath = AddCheckbox(
			Resources.UI_Settings_Player_LooseMoneyOnDeath_Title,
			Resources.UI_Settings_Player_LooseMoneyOnDeath_Description,
			_settingsService.Player.LooseMoneyOnDeath,
			changed => { _settingsService.Player.LooseMoneyOnDeath = changed; });
		
		_settingsService.Player.PropertyChanged += (sender, args) =>
		{
			if (sender is not IPlayerSettings player)
				return;

			if (!args.PropertyName.Equals(nameof(player.LooseMoneyOnDeath)))
				return;

			checkBoxLooseMoneyOnDeath.Checked = player.LooseMoneyOnDeath;
		};
			
		var checkBoxLooseMoneyWhenBusted = AddCheckbox(
			Resources.UI_Settings_Player_LooseMoneyWhenBusted_Title,
			Resources.UI_Settings_Player_LooseMoneyWhenBusted_Description,
			_settingsService.Player.LooseMoneyWhenBusted,
			changed => { _settingsService.Player.LooseMoneyWhenBusted = changed; });
		
		_settingsService.Player.PropertyChanged += (sender, args) =>
		{
			if (sender is not IPlayerSettings player)
				return;

			if (!args.PropertyName.Equals(nameof(player.LooseMoneyWhenBusted)))
				return;

			checkBoxLooseMoneyWhenBusted.Checked = player.LooseMoneyWhenBusted;
		};
			
		var listItemStartingInventory = AddListItem(
			Resources.UI_Settings_Player_StartingInventory_Title,
			Resources.UI_Settings_Player_StartingInventory_Description,
			(item, index) => { _settingsService.Player.StartingInventory = item; },
			_settingsService.Player.GetStartingInventoryValues()
			);

		_settingsService.Player.PropertyChanged += (sender, args) =>
		{
			if (sender is not IPlayerSettings player)
				return;

			if (!args.PropertyName.Equals(nameof(player.StartingInventory)))
				return;

			listItemStartingInventory.SelectedItem = player.StartingInventory;
		};

		var listItemBustChance = AddListItem(
			Resources.UI_Settings_Trafficking_BustChance_Title,
			Resources.UI_Settings_Trafficking_BustChance_Description,
			(item, index) => { _settingsService.Trafficking.BustChance = item; },
			_settingsService.Trafficking.GetBustChanceValues()
			);

		_settingsService.Trafficking.PropertyChanged += (sender, args) =>
		{
			if (sender is not ITraffickingSettings trafficking)
				return;

			if (!args.PropertyName.Equals(nameof(trafficking.BustChance)))
				return;

			listItemBustChance.SelectedItem = trafficking.BustChance;
		};

		var checkBoxDiscoverDealer = AddCheckbox(
			Resources.UI_Settings_Trafficking_DiscoverDealer_Title,
			Resources.UI_Settings_Trafficking_DiscoverDealer_Description,
			_settingsService.Trafficking.DiscoverDealer,
			changed => { _settingsService.Trafficking.DiscoverDealer = changed; });
		
		_settingsService.Trafficking.PropertyChanged += (sender, args) =>
		{
			if (sender is not ITraffickingSettings trafficking)
				return;

			if (!args.PropertyName.Equals(nameof(trafficking.DiscoverDealer)))
				return;

			checkBoxDiscoverDealer.Checked = trafficking.DiscoverDealer;
		};
			
		var listItemWantedLevel = AddListItem(
			Resources.UI_Settings_Trafficking_WantedLevel_Title,
			Resources.UI_Settings_Trafficking_WantedLevel_Description,
			(item, index) => { _settingsService.Trafficking.WantedLevel = item; },
			_settingsService.Trafficking.GetWantedLevelValues()
			);

		_settingsService.Trafficking.PropertyChanged += (sender, args) =>
		{
			if (sender is not ITraffickingSettings trafficking)
				return;

			if (!args.PropertyName.Equals(nameof(trafficking.WantedLevel)))
				return;

			listItemWantedLevel.SelectedItem = trafficking.WantedLevel;
		};

	}
}
