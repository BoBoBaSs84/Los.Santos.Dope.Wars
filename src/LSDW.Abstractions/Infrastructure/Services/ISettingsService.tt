<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(TargetDir)LSDW.Domain.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="LSDW.Domain.Classes.Models" #>
<#@ output extension="Designer.cs" #>
#pragma warning disable CS1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace LSDW.Abstractions.Infrastructure.Services;

public partial interface ISettingsService
{
<# foreach (Type nestedType in nestedTypes) { #>
  I<#= nestedType.Name #><#= nameof(Settings) #> <#= nestedType.Name #><#= nameof(Settings) #> { get; }
<# } #>
}
<# foreach (Type nestedType in nestedTypes) { #>

public interface I<#= nestedType.Name #><#= nameof(Settings) #>
{
<# List<PropertyInfo> properties = nestedType.GetProperties().ToList();
foreach (PropertyInfo prop in properties) { #>
<# if (TypeNameOrAlias(prop.PropertyType) != "bool") {#>
  List<<#= TypeNameOrAlias(prop.PropertyType) #>> Get<#= prop.Name #>Values();
<# } #>
	<#= TypeNameOrAlias(prop.PropertyType) #> Get<#= prop.Name #>();
  void Set<#= prop.Name #>(<#= TypeNameOrAlias(prop.PropertyType) #> value);
<# } #>
}
<# } #>
<#+
List<Type> nestedTypes = typeof(Settings).GetNestedTypes().ToList();

private static Dictionary<Type, string> _typeAlias = new Dictionary<Type, string>
{
    { typeof(bool), "bool" },
    { typeof(byte), "byte" },
    { typeof(char), "char" },
    { typeof(decimal), "decimal" },
    { typeof(double), "double" },
    { typeof(float), "float" },
    { typeof(int), "int" },
    { typeof(long), "long" },
    { typeof(object), "object" },
    { typeof(sbyte), "sbyte" },
    { typeof(short), "short" },
    { typeof(string), "string" },
    { typeof(uint), "uint" },
    { typeof(ulong), "ulong" },
    { typeof(void), "void" }
};

private static string TypeNameOrAlias(Type type)
{
    if (_typeAlias.TryGetValue(type, out string alias))
        return alias;

    return type.Name;
}
#>